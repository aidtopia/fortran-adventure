#include "parser.h"
#include "generator.h"
#include "utility.h"

#include <array>
#include <cstdlib>
#include <filesystem>
#include <format>
#include <fstream>
#include <iostream>
#include <print>
#include <vector>

void show_usage(std::ostream &out) {
    std::print(out, "Usage: fortran <file>...\n");
}

void save_symbol_table(
    aid::fortran::program const &program,
    std::filesystem::path const &directory
) {
    auto const sym_file_path =
        (directory / program.unit_name().view()).replace_extension(".sym");
    auto fsymtab = std::ofstream(sym_file_path);
    if (!fsymtab) {
        std::print(std::cerr, "could not save symbol table to \"{}\"\n",
                   sym_file_path.string());
        return;
    }
    program.print_symbol_table(fsymtab);
}

void translate_to_c(
    aid::fortran::program const &program,
    std::filesystem::path const &directory
) {
    auto const c_file_name =
        (directory / program.unit_name().view()).replace_extension(".c");
    auto fcode = std::ofstream(c_file_name);
    if (!fcode) {
        std::print(std::cerr, "could not save C translation to \"{}\"\n",
                   c_file_name.string());
        return;
    }
    std::print(fcode,
R"(// {}
// This file was generated by a Fortran-to-C translator.
// Learn more at https://github.com/aidtopia/fortran-adventure
)", c_file_name.string());
    aid::fortran::generator::generate(fcode, program);
}

int main(int argc, char const *argv[]) {
    if (argc < 2) {
        show_usage(std::cerr);
        return EXIT_FAILURE;
    }

    // Resolve the source file names.
    auto constexpr extensions = std::array<std::string_view, 5>{
        ".f", ".for", ".f4", ".fiv", ".fortran"
    };
    auto paths = std::vector<std::filesystem::path>{};
    for (int i = 1; i < argc; ++i) {
        if (argv[i][0] == '@') {
            // `@foo.txt` means read file names from foo.txt
            if (auto indirect = std::ifstream{argv[i]+1}; indirect) {
                auto line = std::string{};
                while (std::getline(indirect, line)) {
                    paths.push_back(aid::resolve_filename(line, extensions));
                }
            }
        } else {
            paths.push_back(aid::resolve_filename(argv[i], extensions));
        }
    }

    // Parse the code.
    auto const parsed = aid::fortran::parser::parse_files(paths);
    if (!parsed.has_value()) {
        std::print(std::cerr, "{}\n", parsed.error().message());
        return EXIT_FAILURE;
    }
    auto const &program = parsed.value();

    // Create the output directory.
    auto const directory = std::filesystem::path("./target/");
    std::filesystem::create_directory(directory);

    save_symbol_table(program, directory);

    translate_to_c(program, directory);

    return 0;
}
